"""
Las siglas SOLID representan cinco principios fundamentales de la programaci칩n orientada a objetos que ayudan a escribir c칩digo m치s mantenible, escalable y limpio. 

游댳 D - Dependency Inversion Principle (DIP)
Los m칩dulos de alto nivel no deber칤an depender de m칩dulos de bajo nivel. Ambos deber칤an depender de abstracciones.
Las abstracciones no deber칤an depender de los detalles. Los detalles deben depender de las abstracciones.

Las clases no deber칤an depender de clases concretas, sino de interfaces o abstracciones. Porque si cambi치s la implementaci칩n, no deber칤as tener que cambiar la clase que la usa. B치sicamente: no te cases con los detalles, enamorate del concepto.

DEFINICI칐N DADA POR MI AMIGA CHATGPT
"""
from abc import ABC, abstractmethod

# Definimos la abstracci칩n, "interfaz" de ave
class Ave(ABC):
    @abstractmethod
    def comer(self):
        pass

# Definimos nuestras clases concretas
class Pinguino(Ave):
    def comer(self):
        print('El pinguino come pescado.')

class Colibri(Ave):
    def comer(self):
        print('El colibri come nectar.')

# Esta clase no depende de otra en concreto solo de la abstracci칩n
class Alimentador:
    def alimentar(self, ave: Ave):
        ave.comer()


# MAIN
alimentador = Alimentador()
pingu = Pinguino()
coli = Colibri()

alimentador.alimentar(pingu)
alimentador.alimentar(coli)
# 游눤 DIP cumplido: el Alimentador puede trabajar con cualquier Ave, sin saber si vuela, nada o baila salsa.