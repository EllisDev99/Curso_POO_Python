# M√©todos especiales
# Definici√≥n de la clase Persona con m√©todos especiales __str__ y __repr__
class Persona:
    def __init__(self, nombre, edad):
        # M√©todo constructor que inicializa los atributos nombre y edad
        self.nombre = nombre
        self.edad = edad
    
    def __str__(self):
        # Este m√©todo define c√≥mo se ver√° la instancia cuando se use print()
        # Devuelve una representaci√≥n "bonita" para humanos
        return f'Persona(nombre={self.nombre}, edad={self.edad})'

    def __repr__(self):
        # Este m√©todo devuelve una representaci√≥n m√°s formal del objeto
        # Esta forma deber√≠a poder ser usada con eval() para recrear el objeto
        return f'Persona("{self.nombre}",{self.edad})'

    def __add__(self, otro):
        # Le dice a Python c√≥mo debe comportarse tu clase cuando sum√°s dos objetos con el operador +.
        # Si no defin√≠s __add__, Python no va a saber c√≥mo sumar tus objetos y te va a tirar un TypeError.
        nuevo_valor = self.edad + otro.edad
        return Persona(self.nombre + otro.nombre, nuevo_valor)


# Se crea una instancia de Persona 
persona = Persona('Brayan', 25)
# Mostrar la instancia en consola (usa __str__)
print(persona) # Salida: Persona(nombre=Brayan, edad=25)

# Obtener una representaci√≥n formal (usa __repr__)
repre = repr(persona) # repre ahora contiene: 'Persona("Brayan",25)'

# Usar eval para recrear una nueva instancia a partir del string
result = eval(repre)

# Mostrar la nueva instancia al igual que antes, se llama al m√©todo __str__()
print(result) # Salida: Persona(nombre=Brayan, edad=25)

# Se accede directamente al atributo edad del nuevo objeto
print(result.edad) # Salida: 25

brayan = Persona('Brayan', 25)
kevin = Persona('Kevin', 23)
alicia = Persona('Alicia', 18)

fucion = brayan + kevin + alicia
print(fucion.nombre)
print(fucion.edad)

"""
Si __str__ no est√° definido, Python usa __repr__ como respaldo para mostrar algo.

eval() ejecuta cualquier cadena de texto como si fuera c√≥digo Python.
si eval√∫as una cadena que viene de un usuario, le est√°s dando el poder de ejecutar c√≥digo arbitrario.

üîí ¬øCu√°ndo se puede usar (con precauci√≥n)?:
* Si control√°s 100% lo que contiene el string (como en tu ejemplo del __repr__).
* Para scripts temporales, testing, o en c√≥digo interno.
* Pero nunca en producci√≥n con datos externos.

üí° Alternativas seguras:
* ast.literal_eval() ‚Üí Eval√∫a solo estructuras de datos (listas, dicts, strings, n√∫meros). Nada de c√≥digo peligroso.
* json.loads() ‚Üí Si est√°s manejando datos tipo JSON (tambi√©n m√°s seguro).
"""